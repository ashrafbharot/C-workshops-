///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : MOHAMED ASHRAF BHAROT
Student ID#: 139539225
Email ID#  : mamabharot@myseneca.ca 
Section    : ZEE

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1.	Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)? Using the details of this workshop, describe at least three advantages this provides us? 
	We try to use variables and macros to represent information rather than hardcode “magic number” because it is easy for us to change the values whenever needed and it makes code readable and meaning which allows normal person to understand it easily. It saves effort and time as we don’t have to go line by line to modify value in the whole code. We can even reuse or use another value multiple times in the code through variables. In this code three advantages of using, it is:
o	JAN=’1’ & DEC=’12’ here we initialized the value and made it constant by declaring through its variable so that no changes are made in the value for the rest of the code.
o	For log-days 3 we defined it macro so that it remains unchanged throughout the code and if we need to increase or decrease days, we can simply do it by updating its value in macro rather than going through whole code.
o	Max-year 2012 and Min-year 2022 gives a clear idea of the range in which value for year is accepted.

2.	The rating values entered by the user required iteration to perform basic validations with each iteration concentrated on testing for values to be within a specific range. Why do we not include additional logic that sums and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly explain two reasons why this is better design and refer to the details of this workshop to justify your answer. 

	We do not include additional logic that sums and performs the average in the same because the validation function's primary role is to validate whether the value user input is within the specified range or not. There is no use of computing function in the same logic since the sum and average function is only called when the entered value meets the validation criteria and therefore, including additional logic that performs the sum and average makes the code more complicated.
	By separating validation routine with sum and average logic, it makes the sum and average part more flexible. The sum and average logic can be reused throughout the rest of the code for computation. If we want to add one more rating to the code, we may use the same computation logic to calculate the sum and average of the ratings rather than writing it again.
